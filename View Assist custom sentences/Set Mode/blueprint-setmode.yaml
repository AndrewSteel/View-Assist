# View Assist - Set Mode (v 1.0.0)
blueprint:
  name: View Assist - Set Mode
  description: Ask View Assist to set mode to one on the list and View Assist complies (View Assist setmode v 1.0.0)
  domain: automation
  input:
    command:
      name: Command Text
      description: The command to use to trigger the automation
      default: "(set mode [to] {mode} | turn on {mode} mode)"
    command_dnd:
      name: Command DND Text
      description: The command to use to trigger the automation
      default: "(set do not disturb [to] off | turn off do not disturb mode)"      
    modes:
      name: Modes
      description: The available modes (do not include do not disturb)
      default: "['normal', 'night', 'hold', 'cycle']"                
    group_entity: 
      name: Group Entity
      description: The group that holds the list of View Assist satellites(example group.viewassist_satellites)
      selector:
        entity:
          filter:
            - domain: group
      default: "group.viewassist_satellites"                  
alias: VIEW ASSIST - Set mode
description: ""
trigger:
  - platform: conversation
    command: !input command
      - 
  - platform: conversation
    command: !input command_dnd
    id: dndoff
condition: []
action:
  - if:
      - condition: template
        value_template: >-
          {{ trigger.slots.mode in modes | trigger.slots.mode in ['do not disturb'] }}
    then:
      - set_conversation_response: Setting mode to {{ trigger.slots.mode }}
        enabled: true
      - choose:
          - conditions:
              - condition: template
                value_template: >-
                  {{ trigger.slots.mode in modes }}
            sequence:
              - if:
                  - condition: template
                    value_template: >-
                      {% if target_satellite_device_type != 'audio_only'
                      %}true{% else %}false{% endif %}
                then:
                  - set_conversation_response: >-
                      Sorry.  {{ trigger.slots.mode }} is not a valid mode for
                      this device
                else:
                  - service: python_script.set_state
                    data:
                      entity_id: " {{ target_satellite_device }} "
                      mode: "{{ trigger.slots.mode }}"
          - conditions:
              - condition: template
                value_template: "{{ trigger.slots.mode in ['do not disturb'] }}"
            sequence:
              - service: python_script.set_state
                data:
                  entity_id: " {{ target_satellite_device }} "
                  do_not_disturb: true
    else:
      - set_conversation_response: "Sorry.  {{ trigger.slots.mode }} is not a valid mode. "
  - choose:
      - conditions:
          - condition: trigger
            id:
              - dndoff
        sequence:
          - service: python_script.set_state
            data:
              entity_id: " {{ target_satellite_device }} "
              do_not_disturb: false
          - set_conversation_response: Do not disturb mode is now off
variables:
  modes: !input modes
  group_entity: !input group_entity
  target_satellite_device: |-
    {% for sat in expand(group_entity) %}
      {% if device_id(sat.attributes.mic_device)  == trigger.device_id %}
        {{ sat.entity_id }}
      {% endif %}
    {% endfor %}
  target_display_device: "{{ device_id(state_attr(target_satellite_device, 'display_device')) }}"
  target_mediaplayer_device: "{{ state_attr(target_satellite_device, 'mediaplayer_device') }}"
mode: single
